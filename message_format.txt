MESSAGE FORMAT FOR COMMUNICATION BETWEEN ROVER MASTER PIC AND CONNECTED DEVICES
-------------------------------------------------------------------------------

Sensor PIC --i2c--> Rover Master PIC (ToMainHigh_MQ) / (SensorDataRecv_MQ)
------------------------------------
byte[0] = message_index_number
byte[1] = placeholder (using this byte as a placeholder. set to arbitrary number)
byte[2] = sensor_1[0]
byte[3] = sensor_1[1]
byte[4] = sensor_2[0]
byte[5] = sensor_2[1]
byte[6] = sensor_3[0]
byte[7] = sensor_3[1]
byte[8] = sensor_4[0]
byte[9] = sensor_4[1]
byte[10] = sensor_5[0]
byte[11] = sensor_5[1]
byte[12] = sensor_6[0]
byte[13] = sensor_6[1]
byte[14] = sensor_7[0]
byte[15] = sensor_7[1]
byte[16] = sensor_8[0]
byte[17] = sensor_8[1]
byte[18] = sensor_9[0]
byte[19] = sensor_9[1]
byte[20] = sensor_10[0]
byte[21] = sensor_10[1]
byte[22] = placeholder (using this byte as a placeholder. set to arbitrary number)


Motor PIC --i2c--> Rover Master PIC (ToMainHigh_MQ) / (MotorDataRecv_MQ)
-----------------------------------
byte[0] = message_index_number
byte[1] = placeholder (using this byte as a placeholder. set to arbitrary number)
byte[2] = motor_left[0]
byte[3] = motor_left[1]
byte[4] = motor_right[0]
byte[5] = motor_right[1]
byte[6] = placeholder (using this byte as a placeholder. set to arbitrary number)


Rover Master PIC --UART--> ARM PIC (sensor data) (FromMainHigh_MQ) / (SensorDataSend_MQ)
------------------------------------------------
byte[0] = message_index_number
byte[1] = message_type (tells the ARM PIC that this is sensor data)
byte[2] = sensor_1[0]
byte[3] = sensor_1[1]
byte[4] = sensor_2[0]
byte[5] = sensor_2[1]
byte[6] = sensor_3[0]
byte[7] = sensor_3[1]
byte[8] = sensor_4[0]
byte[9] = sensor_4[1]
byte[10] = sensor_5[0]
byte[11] = sensor_5[1]
byte[12] = sensor_6[0]
byte[13] = sensor_6[1]
byte[14] = sensor_7[0]
byte[15] = sensor_7[1]
byte[16] = sensor_8[0]
byte[17] = sensor_8[1]
byte[18] = sensor_9[0]
byte[19] = sensor_9[1]
byte[20] = sensor_10[0]
byte[21] = sensor_10[1]
byte[22] = 0xFF (stop condition byte)


Rover Master PIC --UART--> ARM PIC (motor data) (FromMainHigh_MQ) / (MotorDataSend_MQ)
-----------------------------------------------
byte[0] = message_index_number
byte[1] = message_type (tells the Rover Master PIC that this is motor data)
byte[2] = motor_command (tells the Rover Master PIC how to move)
byte[3] = move_distance
byte[4] = speed
byte[5] = 0xFF (stop condition byte)


ARM PIC --UART--> Rover Master PIC (ToMainLow_MQ)
----------------------------------
byte[0] = message_index_number
byte[1] = motor_left_cmd[0]
byte[2] = motor_left_cmd[1]
byte[3] = motor_right_cmd[0]
byte[4] = motor_right_cmd[1]
byte[5] = 0xFF (stop condition byte)


Rover Master PIC --i2c--> Motor PIC (FromMainHigh_MQ)
-----------------------------------
byte[0] = message index number
byte[1] = motor_left_cmd[0]
byte[2] = motor_left_cmd[1]
byte[3] = motor_right_cmd[0]
byte[4] = motor_right_cmd[1]


Motor PIC --UART--> Motor Controller (FromMainLow_MQ)
------------------------------------
byte[0] = address
byte[1] = command
byte[2] = data
byte[3] = checksum
